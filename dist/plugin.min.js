"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const fs_1=require("fs"),searchDefault={script:["src"]};function createPathRewriter(t,e){const r=t.replace(/^[/\\]/,"").replace(/[\[\]]/g,"\\$&").replace(/[/\\](?![\[\]])/g,"[/\\\\]").replace(/[$^*+?.()|{}]/g,"\\$&"),s=new RegExp("^\\s*[/\\\\]?"+r+"\\s*$");return s.replace=e||!1,s}function buildProcessor(t){const e=Object.keys(t).map(e=>createPathRewriter(e,t[e]));return function(t,r){if(t.attrs){const s=t.attrs[r];if(s){const n=e.find(function(t){return t.test(this)},s);n&&(n.replace?t.attrs[r]=n.replace:delete t.attrs[r])}}}}function getPathMap(t){switch(typeof t){case"string":return new Promise(function(e,r){fs_1.readFile(t,"utf8",function(t,s){if(t)r(t);else{const t=JSON.parse(s);for(var n in t){const e=t[n];"string"!=typeof e&&e&&"string"==typeof e.path&&(t[n]=t[n].path)}e(t)}})});case"object":return Promise.resolve(t);default:return Promise.reject("pathMap option must be a string or object")}}function rewritePathsPlugin(t){const e=t.search||searchDefault,r=getPathMap(t.pathMap).then(buildProcessor);return function(t){return r.then(r=>(t.walk(t=>{if(t.attrs&&t.tag){const n=e[t.tag];if(n)for(var s of n)t.attrs[s]&&r(t,s)}return t}),t))}}exports.default=rewritePathsPlugin;